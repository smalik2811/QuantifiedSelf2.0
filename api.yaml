openapi: 3.0.3
info:
  title: QuantifiedSelf App V2
  description: |-
    QuantifiedSelf App is a personal tracking app.
    - It allows the user to create a new account, update and delete it.
    - The logged in user can create a new tracker of different types, read, update them and delete them.
    - Every tracker can be locked at any time with appropiate value, also can be read, updated and deleted.
    
    
    [More details can be found here](https://docs.google.com/presentation/d/e/2PACX-1vRJGJx2suOL0IhNp8DUGn5PRI7by86HXOtNHCu6VGu6PcGsANQy5Lj-S2y8TJ6ijgj-aNsf4epoKX2L/pub?start=false&loop=false&delayms=3000)
    
    
    # Error Codes
    | Resource | Error Code | Message                                   |
    |----------|------------|-------------------------------------------|
    | user     | user001    | Firstname is required and must be string. |
    | user     | user002    | Lastname must be string.                  |
    | user     | user003    | Email address is required and should be valid.|
    | tracker  | tracker001 | Name is required and should be string. |
    | tracker  | tracker002 | Type should be a valid integer. |
    | tracker  | tracker003 | Enter atleast 1 option.|
    | log      | log001     | Enter valid value.
    | log      | log002     | Enter valid timestamp.|
    # Tracker Types
    | Code     | Name            |
    |----------|-----------------|
    | 1        | Numerical       |
    | 2        | Multiple Choice |
    | 3        | Time Duration   |
    | 4        | Boolean         |
    
  contact:
    email: smalik2811@outlook.com
  version: "1.0"
servers:
  - url: http://localhost:8080/
tags:
  - name: user
    description: Operations about user
  - name: tracker
    description: Everything about tracker
  - name: log
    description: Operations about log
paths:
  /user:
    post:
      tags:
        - user
      summary: Create new user
      description: Anyone can create a new account with a unique userName and a valid email.
      operationId: createUser
      requestBody:
        description: Details to create a new user.
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "Charles54"
                password:
                  type: string
                  format: password
                  example: "Long_Password_Is_Better_Than_A_Complex_One"
                firstName:
                  type: string
                  example: "Charles"
                lastName:
                  type: string
                  example: "Xavier"
                email:
                  type: string
                  example: "prof_x_54@outlook.com"
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  "error_code":
                    type: string
                    example: "User001"
                  "error_message":
                    type: string
                    example: "Firstname is required and should be String."
        '409':
          description: Username already exist.
        '500':
          description: Unexpected error.
    
    get:
      tags:
        - user
      summary: Get User Details
      description: 'The logged in user can get the personal details.'
      operationId: viewUser
      parameters:
        - in: header
          name: Authentication-Token
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful
          content:
            applicatin/json:
              schema:
                type: object
                properties:
                  userName:
                    type: string
                    example: Charles54
                  password:
                    type: string
                    format: password
                    example: Long_Password_Is_Better_Than_A_Complex_One
                  firstName:
                    type: string
                    example: Charles
                  lastName:
                    type: string
                    example: Xavier
                  email:
                    type: string
                    example: prof_x_54@outlook.com
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected error.
    patch:
      tags:
        - user
      summary: Updates the user profile.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters: []
      requestBody:
        description: Details to update.
        content:
            applicatin/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    format: password
                    example: Long_Password_Is_Better_Than_A_Complex_One
                  firstName:
                    type: string
                    example: Charles
                  lastName:
                    type: string
                    example: Xavier
                  email:
                    type: string
                    example: prof_x_54@outlook.com
      responses:
        '200':
          description: Update Successful
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected error.
      security:
        - Token: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters: []
      responses:
        '401':
          description: Unauthorised Access
        '200':
          description: Deletion Successful
        '500':
          description: Unexpected error.
      security:
        - Token: []   
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: 'Username and Password is must to login.'
      operationId: loginUser
      parameters:
        - name: include_auth_token
          in: query
          schema:
            type: string
            default: "True"
      requestBody:
        description: Credentials to login.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: prof_x_54@outlook.com
                password:
                  type: string
                  format: password
                  example: Long_Password_Is_Better_Than_A_Complex_One
      responses:
        '200':
          description: Login Successful and authorisation token provide.
          content:
            applicatin/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 4458ECBCD673C3307AC8C3C071CB03E4DA60890556E90F135AF7F92E3B6DC99E
        '400':
          description: Wrong password supplied
        '404':
          description: Username not found.
        '500':
          description: Unexpected error.
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: Logout Successful
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected error.
      security:
        - Token: []   
  /tracker:
    post:
      tags:
        - tracker
      summary: Create new Tracker
      description: Logged in user can create a new Tracker.
      operationId: createTracker
      requestBody:
        description: Details of the Tracker to be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Evening Game
                description:
                  type: string
                  example: Game I play in Evening.
                type:
                  type: integer
                  format: int64
                  example: 2
                options:
                  type: array
                  items:
                      type: string
                  example: ["Cricket", "Badminton","Football"]
      responses:
        '201':
          description: Tracker created successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  "error_code":
                    type: string
                    example: "tracker001"
                  "error_message":
                    type: string
                    example: "Name is required and should be string."
        '401':
          description: Unauthorised Access
        '409':
          description: Username already exist.
        '500':
          description: Unexpected error.  
      security:
        - Token: []
    get:
      tags:
        - tracker
      summary: Get all the Trackers.
      description: Logged in user can get the details of all the trackers user created.
      operationId: readAllTrackers
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                example:
                  - name: Evening Game
                    description: The game I play in Evening.
                  - name: Temperature
                    description: My temperature every morning.
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected error.  
      security:
        - Token: []
  /tracker/{name}:
    get:
      tags:
        - tracker
      summary: Get the details of the tracker specified
      description: Logged in user can get the details of the tracker name specified.
      operationId: readTracker
      parameters:
        - name: name
          in: path
          description: Name of the tracker that needs to be read.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful.
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                    example: Evening Game
                  description:
                    type: string
                    example: The game I play in evening.
                  type:
                    type: integer
                    format: int64
                    example: 2
                  options:
                    type: array
                    items:
                      type: string
                    example: ["Cricket", "Badminton", "Football"]
        '400':
          description: Invalid name supplied.
        '401':
          description: Unauthorised Access
        '404':
          description: Tracker not found.
        '500':
          description: Unexpected Error.  
      security:
        - Token: []
    patch:
      tags:
        - tracker
      summary: Update the tracker
      description: Logged in user can update the name, description, options of the tracker.
      operationId: updateTracker
      parameters:
        - name: name
          in: path
          description: Name of the tracker that needs to be read.
          required: true
          schema:
            type: string
      requestBody:
        description: Details of the Tracker
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Evening Game
                description:
                  type: string
                  example: Game I play in Evening.
                options:
                  type: array
                  items:
                      type: string
                  example: ["Cricket","Badminton","Football"]
      responses:
        '201':
          description: Update Successful.
        '400':
          description: Invalid name supplied.
        '401':
          description: Unauthorised Access
        '404':
          description: Tracker not found.
        '500':
          description: Unexpected Error.  
      security:
        - Token: []
    delete:
      tags:
        - tracker
      summary: Delete the tracker
      description: Logged in user can delete the tracker and the corresponding logs.
      operationId: deleteTracker
      parameters:
        - name: name
          in: path
          description: Name of the tracker that needs to be deleted.
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Tracker not found.
        '200':
          description: Deletion Successful.
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected Error.  
      security:
        - Token: []
  /log:
    post:
      tags:
        - log
      summary: Create new Log
      description: Logged in user can log a Tracker.
      operationId: createLog
      requestBody:
        description: Details of the Log
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Evening Game
                value:
                  type: string
                  example: Cricket
                note:
                  type: string
                  example: I think I am kinda enjoying it.
                timestamp:
                  type: string
                  example: Wed Aug 10 2022 11:30:38
      responses:
        '201':
          description: Log created successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  "error_code":
                    type: string
                    example: "User001"
                  "error_message":
                    type: string
                    example: "Firstname is required and should be String."
        '401':
          description: Unauthorised Access
        '404':
          description: Tracker not found.
        '500':
          description: Unexpected error.
      security:
        - Token: []
    get:
      tags:
        - log
      summary: Get single tracker
      description: Logged in user can get details of log with the id.
      operationId: readLog
      parameters:
        - name: logID
          in: header
          schema:
            type: integer
            format: int32
          required: true
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    example: 1001
                  value:
                    type: string
                    example: "Cricket"
                  note:
                    type: string
                    example: I think I am kinda enjoying Cricket.
                  timestamp:
                    type: string
                    example: Wed Aug 10 2022 11:30:38
        '401':
          description: Unauthorised Access
        '400':
          description: Invalid id supplied.
        '404':
          description: Log not found.
        '500':
          description: Unexpected error.
      security:
        - Token: []
    patch:
      tags:
        - log
      summary: Update Log
      description: Logged in user can update the log with the logid.
      operationId: updateLog
      parameters:
        - name: logID
          in: header
          schema:
            type: integer
            format: int32
          required: true
      requestBody:
        description: Details of the Log
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: "Cricket"
                note:
                  type: string
                  example: I think I am kinda enjoying Cricket.
                timestamp:
                  type: string
                  example: Wed Aug 10 2022 11:30:38
      responses:
        '201':
          description: Update Successful.
        '400':
          description: Invalid id supplied.
        '401':
          description: Unauthorised Access
        '404':
          description: Log not found.
        '500':
          description: Unexpected Error.
      security:
        - Token: []
    delete:
      tags:
        - log
      summary: Delete Log
      description: Logged in user can delete the log with the logid.
      operationId: deleteLog
      parameters:
        - name: logID
          in: header
          schema:
            type: integer
            format: int32
          required: true
      responses:
        '404':
          description: Tracker not found.
        '200':
          description: Deletion Successful.
        '401':
          description: Unauthorised Access
        '500':
          description: Unexpected Error.
      security:
        - Token: []
  /log/{name}:  
    get:
      tags:
        - log
      summary: Get all the Logs.
      description: Logged in user can get the details of all the log for a particular tracker.
      operationId: readAllLogs
      parameters:
        - name: name
          in: path
          description: Name of the tracker to get all the logs.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    logId:
                      type: integer
                      format: int32
                    value:
                      type: string
                    note:
                      type: string
                    timestamp:
                      type: string
                example:
                  - logId: 1001
                    value: "Cricket"
                    note: I think I am kinda enjoying Cricket.
                    timestamp: Wed Aug 10 2022 11:30:38
                  - logId: 1002
                    value: "37"
                    note: Feeling Good.
                    timestamp: Wed Aug 10 2022 08:00:13
        '401':
          description: Unauthorised Access
        '400':
          description: Invalid name supplied.
        '404':
          description: Tracker not found.
        '500':
          description: Unexpected Error.
      security:
        - Token: []
        
components:
  securitySchemes:
    Token:
      type: http
      scheme: bearer